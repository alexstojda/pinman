// Code generated by mockery v2.32.0. DO NOT EDIT.

package pinballmap

import mock "github.com/stretchr/testify/mock"

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

// GetLocation provides a mock function with given fields: id
func (_m *MockClientInterface) GetLocation(id int) (*Location, error) {
	ret := _m.Called(id)

	var r0 *Location
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*Location, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *Location); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Location)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocations provides a mock function with given fields: nameFilter
func (_m *MockClientInterface) GetLocations(nameFilter string) ([]Location, error) {
	ret := _m.Called(nameFilter)

	var r0 []Location
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]Location, error)); ok {
		return rf(nameFilter)
	}
	if rf, ok := ret.Get(0).(func(string) []Location); ok {
		r0 = rf(nameFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Location)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nameFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
