// Code generated by mockery v2.32.0. DO NOT EDIT.

package generic

import (
	http "net/http"
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

// Do provides a mock function with given fields: request, responseObj, errorResponseObj
func (_m *MockClientInterface) Do(request *http.Request, responseObj interface{}, errorResponseObj interface{}) (int, error) {
	ret := _m.Called(request, responseObj, errorResponseObj)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}, interface{}) (int, error)); ok {
		return rf(request, responseObj, errorResponseObj)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}, interface{}) int); ok {
		r0 = rf(request, responseObj, errorResponseObj)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*http.Request, interface{}, interface{}) error); ok {
		r1 = rf(request, responseObj, errorResponseObj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUrl provides a mock function with given fields: path, params
func (_m *MockClientInterface) NewUrl(path string, params url.Values) *url.URL {
	ret := _m.Called(path, params)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(string, url.Values) *url.URL); ok {
		r0 = rf(path, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
